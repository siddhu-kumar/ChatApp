body {
  background-color: black;
  color: wheat;
  height: 93vh;
  width: 100%;
  margin: 0;
}

#all-user {
  display: flex;
  flex-wrap: wrap;
}

.each-user {
  width: 25vh;
  height: 3vh;
  border: 1px solid wheat;
  margin: 2vh;
  padding: 1vh;
}
.register {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 30vh;
}

.register form{
  display: flex;
  flex-direction: column;
  margin: 2vh;
}


.register form input {
  padding: 4px 6px;
  margin: 4px 0px;
  color: purple;
  background: snow;
  outline: none;
  border: 1px solid gray;
  width: 35vh;
  height: 3vh;
  font-size: 2vh;
}

.register form input::placeholder {
  color: gray;
}

.register button {
  margin: auto;
  margin-top: 2vh;
  height: 5vh;
  width: 12vh;
  font-size: 2.5vh;
  background: black;
  color: wheat;
  cursor: pointer;
}

.register button:hover {
  background-color: purple;
  color: wheat;
  border: 2px solid wheat;
}

.my-detail {
  height: 6vh;
  width: 100%;
  box-sizing: border-box;
  border: 1px solid wheat;
  display: flex;
  align-items: center;
  flex-direction: row;
  margin: 0;
}

.my-image {
  height: 4vh;
  width: 4vh;
  border: 1px solid wheat;
  border-radius: 50%;
  margin-left: 10px;
}

.chat {
  display: flex;
  flex-direction: column;
  margin: 2vh;
}

.chat-forms {
  position: fixed;
  bottom: 1vh;
  width: 100%;
  margin: auto;
}

.chat-input {
  width: 80%;
  height: 5vh;
  font-size: 2vh;
  font-style: normal;
  font-weight: bold;
  outline: none;
  border: none;
  padding-left: 10px;
  border-radius: 10px;
}

.chat-button {
  width: 17%;
  height: 5vh;
  font-size: 2vh;
  font-style: normal;
  font-weight: bold;
  color: purple;
  outline: none;
  border: none;
  outline: none;
  border-radius: 10px;
}

#messages ul {
  list-style-type: none; 
  padding: 0;
  margin: 0;
}

#messages li {
  display: block; 
  margin: 10px 0;
  padding: 8px 15px;
  border-radius: 10px;
  max-width: 60%; 
  clear: both; 
}

.user {
  background-color: #f1f1f1; 
  color: black;
  align-self: flex-start; 
  float: left;
  margin-left: 0;
}

.client {
  background-color: purple; 
  color: wheat; 
  align-self: flex-end; 
  float: right; 
  margin-right: 0;
}



/* 

<!-- Simple form -->
<form id="myForm">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" required>
    <button type="submit">Submit</button>
</form>

<script>
document.getElementById('myForm').addEventListener('submit', function(event) {
    event.preventDefault();  // Prevent form from reloading the page

    const formData = new FormData(this);
    const name = formData.get('name');

    fetch('/submit', {
        method: 'POST',
        body: new URLSearchParams({ name })
    })
    .then(response => response.json())
    .then(data => {
        if (data.redirect) {
            window.location.href = data.redirect;  // Redirect to a different page
        } else {
            alert(data.message);  // Show success or error message
        }
    })
    .catch(error => {
        console.error('Error:', error);
    });
});
</script>

app.post('/submit', (req, res) => {
    const { name } = req.body;

    if (!name) {
        return res.status(400).json({ message: 'Name is required!' });
    }

    // Simulate saving to the database
    users.push({ name });

    // Send a JSON response with a redirect URL
    res.json({ message: 'User added successfully!', redirect: '/thank-you' });
});

app.get('/thank-you', (req, res) => {
    res.send('<h1>Thank you for your submission!</h1>');
});

const emitWithTimeout = (socket, event, message, timeout = 5000) => {
    return new Promise((resolve, reject) => {
      const timeoutId = setTimeout(() => {
        reject(new Error('Timeout exceeded'));
      }, timeout);
  
      socket.emit(event, message, (response) => {
        clearTimeout(timeoutId); // Clear the timeout when response is received
        resolve(response); // Resolve with the response
      });
    });
  };
  
  // Usage:
  try {
    const response = await emitWithTimeout(socket, 'messageFromClientToServer', message);
    console.log(response);
  } catch (error) {
    console.error('Error:', error);
  }
   */